{"version":3,"file":"static/js/312.67f624aa.chunk.js","mappings":"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","sources":["api/movies.js","components/ImageWithCheck/ImageWithCheck.styled.js","components/ImageWithCheck/ImageWithCheck.jsx","components/Movies/MoviesList.styled.js","components/Movies/MoviesList.jsx","components/Movies/MoviesSearchbar.styled.js","components/Movies/MoviesSearchbar.jsx","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import axios from 'axios';\n\n\nconst apiKey = \"6fabefdb44ed110e1291f5d3ba9d7ac8\";\n\nexport const getTrendyMovies = async () => {\n    try {\n       \n\n        const response = await axios.get(\n            `https://api.themoviedb.org/3/trending/movie/day?api_key=${apiKey}`\n        );\n        return response.data.results;\n    } catch (error) {\n        console.log(error);\n    };\n};\n\nexport const getMoviesByQuery = async (query) => {\n    try {\n        const response = await axios.get(\n            `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${query}&page=1&include_adult=false`\n        );\n        return response.data.results;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n\nexport const getMoviesCast = async (movieId) => {\n\n\n    try {\n        const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/credits?${apiKey}`);\n        return response.data;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const getMoviesById = async (movieId) => {\n\n\n    try {\n        const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}?${apiKey}`);\n        return response.data;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const getMoviesReviews = async (movieId) => {\n\n\n    try {\n        const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?${apiKey}`);\n        return response.data;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nconst apiMovies = {\n    getTrendyMovies,\n    getMoviesByQuery,\n    getMoviesById,\n    getMoviesCast,\n    getMoviesReviews,\n}\n\nexport default apiMovies;","import styled from \"styled-components\";\n\nexport const Img = styled.img`\n  display: block;\n  max-width: ${props => props.maxWidth ?? \"300px\"};\n  width: 100%;\n`;","import { useState } from \"react\";\nimport { Img } from \"./ImageWithCheck.styled\";\nimport imgNotFound from \"../../images/imgNotFound.png\"\nimport PropTypes from 'prop-types';\n\nconst ImageWithCheck = ({ src, alt, check, maxWidth }) => {\n    const [imgSrc, setImgSrc] = useState(src);\n    const errorHandler = () => {\n        setImgSrc(imgNotFound);\n    }\n\n    return (\n        <>\n            {!check && <Img maxWidth={maxWidth} src={imgNotFound} alt={alt} />}\n            {check && <Img maxWidth={maxWidth} onError={errorHandler} src={imgSrc} alt={alt} />}\n        </>\n    );\n};\n\nImageWithCheck.propTypes = {\n    src: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired,\n    check: PropTypes.string,\n    maxWidth: PropTypes.string,\n};\n\nexport default ImageWithCheck;","import styled from \"styled-components\";\n\nconst borderRadius = \"10px\";\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 20px;\n  justify-items: center;\n  padding: 0 20px;\n  list-style-type: none;\n  & li {\n    max-width: 300px;\n    width: 100%;\n    border: 1px solid black;\n    border-radius: ${borderRadius};\n    background-color: lightgray;\n    &:hover {\n      border-color: gray;\n      box-shadow: -1px -1px 3px 1px black, 1px 1px 3px 1px black;\n    }\n  }\n  & a {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    color: black;\n    text-decoration: none;\n    & p {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      text-align: center;\n      margin: auto 0;\n      padding: 5px;\n      font-weight: 500;\n    }\n  }\n`;\n\nexport const ImgWrapper = styled.div`\n  max-height: 370px;\n  height: 100%;\n  border-top-left-radius: ${borderRadius};\n  border-top-right-radius: ${borderRadius};\n  border-bottom: 1px solid black;\n  overflow: hidden;\n  & img {\n    display: block;\n    height: 100%;\n  }\n`;","import ImageWithCheck from 'components/ImageWithCheck/ImageWithCheck';\nimport React from 'react'\nimport { Link, useLocation } from 'react-router-dom';\nimport { ImgWrapper, List } from './MoviesList.styled';\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ movies }) => {\n    let location = useLocation();\n\n    return (\n        <List>\n            {movies.map(movie => (\n                <li key={movie.id}>\n                    <Link\n                        to={`/movies/${movie.id}`}\n                        state={{\n                            from: location,\n                        }}\n                    >\n                        <ImgWrapper>\n                            <ImageWithCheck src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`} alt={movie.title} check={movie.poster_path} />\n                        </ImgWrapper>\n                        <p>{movie.title}</p>\n                    </Link>\n                </li>\n            ))}\n        </List>\n    )\n}\n\nMoviesList.propTypes = {\n    movies: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default MoviesList","import styled from \"styled-components\";\n\nexport const SearchbarWrapper = styled.div`\n  padding: 10px 20px;\n`;\n\nexport const Searchbar = styled.form`\n  display: grid;\n  grid-template-columns: minmax(50px, 1fr) 80px;\n  grid-template-areas: \"searchbar searchbtn\";\n  margin: 0 auto;\n  border: 1px solid grey;\n  border-radius: 10px;\n  overflow: hidden;\n  @media (min-width: 576px) {\n    grid-template-columns: 450px 80px;\n    width: max-content;\n  }\n  & input {\n    grid-area: searchbar;\n    padding: 5px 10px;\n    outline: none;\n    border: none;\n    font-size: 18px;\n    line-height: 1.2;\n  }\n  & button {\n    display: inline-block;\n    width: 80px;\n    height: 48px;\n    border: 0;\n    background-image: url('./Icon/search.svg');\n    background-size: 30%;\n    background-repeat: no-repeat;\n    background-position: 5px;\n    opacity: 0.6;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    cursor: pointer;\n    outline: none;\n  \n    &:hover {\n      opacity: 1;\n    }\n    & p {\n    size: 22px;\n    width: 100px;\n    height: 100%;\n    padding: 0;\n    overflow: hidden;\n    letter-spacing: 1px;\n    font-weight: 300;\n    border: 0;\n    }\n  }\n  &:focus-within {\n    box-shadow: -1px -1px 3px 1px black, 1px 1px 3px 1px black;\n  }\n`;","import React from 'react'\nimport { Searchbar, SearchbarWrapper } from './MoviesSearchbar.styled';\nimport PropTypes from 'prop-types';\n\nconst MoviesSearchbar = ({ value, submitHandler, changeHandler }) => {\n    return (\n        <SearchbarWrapper>\n            <Searchbar onSubmit={submitHandler}>\n                <input\n                    type=\"text\"\n                    value={value}\n                    onChange={changeHandler}\n                />\n                <button type=\"submit\" >\n                    <p>Search</p>\n                </button>\n            </Searchbar>\n        </SearchbarWrapper>\n    );\n};\n\nMoviesSearchbar.propTypes = {\n    value: PropTypes.string.isRequired,\n    submitHandler: PropTypes.func.isRequired,\n    changeHandler: PropTypes.func.isRequired,\n}\n\nexport default MoviesSearchbar;","import MoviesList from 'components/Movies/MoviesList';\nimport MoviesSearchbar from '../../components/Movies/MoviesSearchbar';\nimport React, { useCallback, useEffect } from 'react';\nimport { useState } from 'react';\nimport { Outlet, useParams, useSearchParams } from 'react-router-dom';\nimport apiMovies from 'api/movies';\nimport Loader from 'components/Loader/Loader';\n\nconst MoviesPage = () => {\n    const params = useParams();\n    const [queryValue, setQueryValue] = useState('');\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [moviesByQuery, setMoviesByQuery] = useState([]);\n    const [isLoading, setIsLoading] = useState(false)\n\n    const queryChangeHandler = (e) => {\n        setQueryValue(e.target.value);\n    };\n\n    const querySubmitHandler = (e) => {\n        e.preventDefault();\n\n        if (!queryValue) {\n            alert(\"Complete the search field!\");\n        }\n\n        queryValue ? setSearchParams({ query: queryValue }) : setSearchParams('');\n\n        setQueryValue('');\n    };\n\n    const getWantedMovies = useCallback(async () => {\n        try {\n            const query = searchParams.get('query');\n            if (query) {\n                const moviesList = await apiMovies.getMoviesByQuery(query);\n                setMoviesByQuery(moviesList);\n                setIsLoading(true)\n            }\n        } catch (error) {\n            console.log(error);\n        }\n        setIsLoading(false)\n    }, [searchParams]);\n\n    useEffect(() => {\n        getWantedMovies();\n    }, [getWantedMovies]);\n\n    return (\n        <>\n            {isLoading && <Loader />}\n            {!params.movieId && (\n                <>\n                    <MoviesSearchbar\n                        value={queryValue}\n                        submitHandler={querySubmitHandler}\n                        changeHandler={queryChangeHandler}\n                    />\n                    <MoviesList movies={moviesByQuery} />\n                </>\n            )}\n            {params.movieId && (\n                <>\n                    <Outlet />\n                </>\n            )}\n        </>\n    );\n};\n\nexport default MoviesPage;"],"names":["apiKey","getTrendyMovies","axios","response","data","results","console","log","getMoviesByQuery","query","getMoviesCast","movieId","getMoviesById","getMoviesReviews","apiMovies","Img","styled","props","maxWidth","src","alt","check","useState","imgSrc","setImgSrc","imgNotFound","onError","borderRadius","List","ImgWrapper","movies","location","useLocation","map","movie","to","id","state","from","ImageWithCheck","poster_path","title","SearchbarWrapper","Searchbar","value","submitHandler","changeHandler","onSubmit","type","onChange","params","useParams","queryValue","setQueryValue","useSearchParams","searchParams","setSearchParams","moviesByQuery","setMoviesByQuery","isLoading","setIsLoading","getWantedMovies","useCallback","get","moviesList","useEffect","Loader","e","preventDefault","alert","target","MoviesList"],"sourceRoot":""}